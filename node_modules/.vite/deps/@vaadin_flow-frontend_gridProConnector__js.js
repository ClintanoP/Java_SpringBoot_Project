import {
  __commonJS
} from "./chunk-BQOD6VY2.js";

// node_modules/@vaadin/flow-frontend/gridProConnector.js
var require_gridProConnector = __commonJS({
  "node_modules/@vaadin/flow-frontend/gridProConnector.js"() {
    (function() {
      const tryCatchWrapper = function(callback) {
        return window.Vaadin.Flow.tryCatchWrapper(callback, "Vaadin Grid Pro");
      };
      function isEditedRow(grid, rowData) {
        return grid.__edited && grid.__edited.model.item.key === rowData.item.key;
      }
      window.Vaadin.Flow.gridProConnector = {
        setEditModeRenderer: (column, component) => tryCatchWrapper(function(column2, component2) {
          column2.editModeRenderer = tryCatchWrapper(function editModeRenderer(root, _, rowData) {
            if (!isEditedRow(this._grid, rowData)) {
              this._grid._stopEdit();
              return;
            }
            if (component2.parentNode === root) {
              return;
            }
            root.appendChild(component2);
            this._grid._cancelStopEdit();
            component2.focus();
          });
          column2._setEditorValue = function(editor, value) {
          };
          column2._getEditorValue = function(editor) {
            return;
          };
        })(column, component),
        patchEditModeRenderer: (column) => tryCatchWrapper(function(column2) {
          column2.__editModeRenderer = tryCatchWrapper(function __editModeRenderer(root, column3, rowData) {
            const cell = root.assignedSlot.parentNode;
            const grid = column3._grid;
            if (!isEditedRow(grid, rowData)) {
              grid._stopEdit();
              return;
            }
            const tagName = column3._getEditorTagName(cell);
            if (!root.firstElementChild || root.firstElementChild.localName.toLowerCase() !== tagName) {
              root.innerHTML = `<${tagName}></${tagName}>`;
            }
          });
        })(column)
      };
    })();
  }
});

// dep:@vaadin_flow-frontend_gridProConnector__js
var vaadin_flow_frontend_gridProConnector_js_default = require_gridProConnector();
export {
  vaadin_flow_frontend_gridProConnector_js_default as default
};
//# sourceMappingURL=@vaadin_flow-frontend_gridProConnector__js.js.map
